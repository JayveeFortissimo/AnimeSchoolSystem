// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Students {
  student_id       Int            @id @unique @default(autoincrement())
  username         String
  email            String         @unique
  age              Int
  contact          String
  password         String
  image            String
  isAdmin          Boolean        @default(false)
  attendance       Attendance[]
  tokens           RefreshToken[]
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  Courses          Courses?       @relation(fields: [coursesCourse_Id], references: [course_Id])
  coursesCourse_Id Int?
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  studentID Int
  user      Students @relation(fields: [studentID], references: [student_id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Courses {
  course_Id  Int          @id @default(autoincrement())
  courseName String
  department String
  schedule   String
  teacher    String
  units      Int
  attendance Attendance[]
  students   Students[]
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
}

model Attendance {
  attendance_Id Int      @id @default(autoincrement())
  studentId     Int
  courseID      Int
  student_ID    Students @relation(fields: [studentId], references: [student_id])
  course_id     Courses  @relation(fields: [courseID], references: [course_Id])
  status        Boolean
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}
